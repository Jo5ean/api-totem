generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Facultad {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique @db.VarChar(255)
  codigo    String?   @db.VarChar(50)
  sheetId   String?   @map("sheet_id") @db.VarChar(255)
  activa    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  carreras  Carrera[]
  syncLogs  SyncLog[]

  @@map("facultades")
}

model Carrera {
  id         Int      @id @default(autoincrement())
  facultadId Int      @map("facultad_id")
  nombre     String   @db.VarChar(255)
  codigo     String   @db.VarChar(50)
  activa     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  facultad   Facultad @relation(fields: [facultadId], references: [id], onDelete: Cascade)
  examenes   Examen[]

  @@unique([facultadId, codigo])
  @@map("carreras")
}

model Examen {
  id                Int          @id @default(autoincrement())
  carreraId         Int          @map("carrera_id")
  aulaId            Int?         @map("aula_id")
  nombreMateria     String       @map("nombre_materia") @db.VarChar(255)
  fecha             DateTime     @db.Date
  hora              DateTime?    @db.Time(0)
  tipoExamen        String?      @map("tipo_examen") @db.VarChar(100)
  monitoreo         String?      @db.VarChar(100)
  materialPermitido String?      @map("material_permitido") @db.Text
  observaciones     String?      @db.Text
  activo            Boolean      @default(true)
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  actasExamen       ActaExamen[]
  aula              Aula?        @relation(fields: [aulaId], references: [id])
  carrera           Carrera      @relation(fields: [carreraId], references: [id], onDelete: Cascade)

  @@index([aulaId], map: "examenes_aula_id_fkey")
  @@index([carreraId], map: "examenes_carrera_id_fkey")
  @@map("examenes")
}

model SyncLog {
  id                  Int      @id @default(autoincrement())
  facultadId          Int      @map("facultad_id")
  tipoOperacion       String   @map("tipo_operacion") @db.VarChar(50)
  resultado           String   @db.VarChar(50)
  mensaje             String?  @db.Text
  registrosProcesados Int      @default(0) @map("registros_procesados")
  createdAt           DateTime @default(now()) @map("created_at")
  facultad            Facultad @relation(fields: [facultadId], references: [id], onDelete: Cascade)

  @@index([facultadId], map: "sync_logs_facultad_id_fkey")
  @@map("sync_logs")
}

model Estudiante {
  id          Int          @id @default(autoincrement())
  dni         String       @unique @db.VarChar(20)
  nombre      String       @db.VarChar(100)
  apellido    String       @db.VarChar(100)
  email       String?      @db.VarChar(255)
  telefono    String?      @db.VarChar(50)
  activo      Boolean      @default(true)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  actasExamen ActaExamen[]

  @@map("estudiantes")
}

model Aula {
  id         Int      @id @default(autoincrement())
  nombre     String   @unique @db.VarChar(100)
  capacidad  Int?
  ubicacion  String?  @db.VarChar(255)
  disponible Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  examenes   Examen[]

  @@map("aulas")
}

model ActaExamen {
  id            Int        @id @default(autoincrement())
  examenId      Int        @map("examen_id")
  estudianteId  Int        @map("estudiante_id")
  presente      Boolean?
  nota          Decimal?   @db.Decimal(4, 2)
  observaciones String?    @db.Text
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  estudiante    Estudiante @relation(fields: [estudianteId], references: [id], onDelete: Cascade)
  examen        Examen     @relation(fields: [examenId], references: [id], onDelete: Cascade)

  @@unique([examenId, estudianteId])
  @@index([estudianteId], map: "actas_examenes_estudiante_id_fkey")
  @@map("actas_examenes")
}
